.TH "dhcpy6d.conf" "5" "Jun 27, 2014" "Henri Wahl" "dhcpy6d.conf"
.SH "NAME"
dhcpy6d.conf \- config file for DHCPv6 server dhcpy6d

.SH "DESCRIPTION"
This file contains the general settings for DHCPv6 server daemon dhcpy6d.
It follows RFC 822 style parsed by Python ConfigParser module.
This configuration file contains several sections which will be discussed in detail here.

An online documentation is also available at 
.I https://dhcpy6d.ifw\-dresden.de/documentation/config/.

Boolean settings can be done with 1/0, on/off or yes/no values. 

Some options allow multiple values. These have to be separated by spaces.

There are 3 types of sections:
.TP
.BR [dhcpy6d]
This section contains general options like interfaces, storage and logging. Only one [dhcpy6d] section is allowed.

.TP
.BR [address_<address_name>]
There can be various [address_<address_name>] sections. In address sections severall address ranges and types can be defind according to you needs.
Addresses are organized in classes. For details read further down.

.TP
.BR [class_<class_name>]
Class definitions allow to apply different addresses, time limits et al. to different types of clients.

.SH "GENERAL CONFIGURATION IN SECTION [dhcpy6d]"
This section contains important general options. Values are sometimes examples and not meant to be used in production
environments.

.TP 
.BR really_do_it\ =\ yes\ |\ no
Let dhcpy6d really_do_it and respond to client requests \- might be of use for debugging and testing.

.TP 
.BR interface\ =\ <interface> [<interface> ...]
The interfaces the server listens on is defined with keyword interface.
Multiple interfaces have to be separated by spaces.

.TP 
.BR mcast\ =\ <multicast-address>
The multicast address to listen at is ff02::1:2. Due to the facts that dhcpy6d at the moment works in local network
segments only and to the restriction of MAC addresses only being usable there it will always have this value.

.TP 
.BR port\ =\ <port>
Exactly the same applies to the port dhcpy6d listens on. Default is 547. Probably senseless to change it but who knows.

.TP 
.BR serverduid\ =\ <longlongserverduid>
The server DUID should be configured with serverduid. If there is none dhcpy6d creates a new one at every startup.
Windows clients might run a little bit wild when server DUID changed. You are free to compose your own as long as it
follows RFC 3315. Please note that it has to be in hexadecimal format \- no octals, no "\-", just like in the example below.
The example here is a DUID\-LLT (Link\-layer Address Plus Time) even if it should be a DUID\-TLL as timestamp comes first.
It is composed of DUID\-type(LLT=1) + Hardware\-type(Ethernet=1) + Unixtime\-in\-hex + MAC\-address what makes a
0001 + 0001 + 11fb5dc9 + 01023472a6c5 = 0001000111fb5dc901023472a6c5.

.TP 
.BR server_preference\ =\ <0-255>
The server_preference determines the priority of the server. The maximum value is 255 which means highest priority.

.TP 
.BR user\ =\ <user>
For security reasons dhcpy6d can be run as non\-root user.

.TP 
.BR group\ =\ <group>
For security reasons dhcpy6d can be run as non\-root group.

.TP 
.BR nameserver\ =\ <nameserver-address>\ [<nameserver-address>\ ...]
Nameservers to be replied to request option 23 are defined with nameserver.
If more than one is needed they have to be separated by spaces.

.TP 
.BR domain\ =\ <domaine-name>
The domain to be used with FQDN hostnames for option 39.

.TP 
.BR domain_search_list\ =\ <domainname>\ [<domainname>\ ...]
Domain search lists to be used with option 24t. If none is given the value of domain above is used.
Multiple domains have to be separated by space or comma.

.TP 
.BR log\ =\ yes\ |\ no
Enable logging.

.TP 
.BR log_console\ =\ yes\ |\ no
Log to the console where
.B dhcpy6d
has been started.

.TP 
.BR log_file\ =\ /path/to/dhcpy6d/log/file
Defines the file used for logging. Will be created if it does not yet exist.

.TP 
.BR log_syslog\ =\ yes\ |\ no
If logs should go to syslog it is set here.

.TP 
.BR log_syslog_destination\ =\ syslogserver
An UDP syslog server may be used if log_syslog_destination points to it.
Optionally a port other than default 514 can be set when adding ":port" to the destination.

.TP 
.BR log_syslog_facility\ =\ <log-facility>
The default syslog facility is "daemon" but can be changed here.

.TP 
.BR store_config\ =\ file\ |\ sqlite\ |\ mysql\ |\ none
Configuration of clients can be stored in a file or in a database.
Databases MySQL and SQLite are supported at the moment, thus possible values are "file", "sqlite" or "mysql".
To disable any client configuration source it has to be "none".

.TP 
.BR store_file_config\ =\ /path/to/client/conf/file
File which contains the clients configuration. Default is
.B /etc/dhcpy6d\-clients.conf.
For details see
.B dhcpy6d\-clients.conf (5).

.TP 
.BR store_sqlite_config\ =\ /path/to/sqlite/config/file
SQLite database file which contains the clients configuration.

.TP 
.BR store_volatile\ =\ sqlite\ |\ mysql
Volatile data like leases and the mapping between Link Local Addresses and MAC addresses can be stored in MySQL or SQLite database, so the possible values for store_volatile are "mysql" and "sqlite". Default is /var/lib/dhcpy6d/volatile.sqlite.

.TP 
.BR store_sqlite_volatile\ =\ /path/to/sqlite/volatile/file
If set store_volatile is set to "sqlite" a SQLite database file must be defined.

.TP 
.BR store_mysql_host\ =\ <database-host>
.TP 
.BR store_mysql_db\ =\ <database-name>
.TP 
.BR store_mysql_user\ =\<database-user>
.TP 
.BR store_mysql_password\ =\ <database-password>
.RI If " store_config " and/or " store_volatile "
use a MySQL database to store information it has to be set with these self\-explanatory options. The same database is used for config and volatile data.

.TP 
.BR identification\ =\ <mac>\ <duid>\ <hostname>
Clients can be set to be identified by several attributes \- MAC address, DUID or hostname. At least one of mac, duid or hostname is necessary. Hostname is the one sent in client request with DHCPv6 option 39. Identification is used to get the correct settings for the client from config file or database.
Same MAC and different DUIDs might be interesting for clients with multiple OS.

.TP 
.BR identification_mode\ =\ match_all\ |\ match_some
If more than one identification attribute has been set, identification_mode can be one of "match_all" or "match_some". The first means that all attributes have to match to identify a client and the latter is more tolerant.

.TP
.BR dns_update\ =\ yes\ |\ no
Dynamically update DNS. This works at the moment only with Bind DNS, but might be extended to others, maybe via call of an external command.

.TP
.BR dns_update_nameserver\ =\ <nameserver-address>\ [<nameserver-address>\ ...]
.TP
.BR dns_rndc_key\ =\ <rndc-key_like_in_rndc.conf>
.TP
.BR dns_rndc_secret\ =\ <secret_key_like_in_rndc.conf>
When connecting to a Bind DNS server its address and the necessary RNDC data must be set.

.TP
.BR dns_ignore_client\ =\ yes\ |\ no
Clients may request that they update the DNS record theirself. If their wishes shall be ignored this option has to be true.

.TP
.BR dns_use_client_hostname\ =\ yes\ |\ no
The client hostname either comes from configuration of dhcpy6d or in the client request.

.TP
.BR preferred_lifetime\ =\ <seconds>
.TP
.BR valid_lifetime\ =\ <seconds>
.TP
.BR t1\ =\ <seconds>
.TP
.BR t2\ =\ <seconds>
Preferred lifetime, valid lifetime, T1 and T2 in seconds are configured with the corresponding options.

.TP
.BR information_refresh_time\ =\ <seconds>
The lifetime of information given to clients as response to an information-request message.

.SH ADDRESS DEFINITIONS IN SEVERAL [address_<address_name>] SECTIONS

.RB The " <address_name> " part\ of\ an " [address_<address_name>] " section\ is\ an\ arbitrarily\ choosen\ identifier\ like\ "clients"\ or\ "invalid_clients".
There can be many address definitions which will be used by classes.
Every address definition may include several properties:

.TP
.BR category\ =\ mac\ |\ id\ |\ range\ |\ random
Categories play an important role when defining patterns for addresses. An address belongs to a certain category:

.BR mac " - uses MAC address from client request as part of address

.BR id " - uses ID given to client in configuration file or database as one octet of address, should be in range 0-FFFF

.BR range " - generate addresses of given ranges

.BR random " - randomly created 64 bit values

.TP
.BR pattern\ =\ 2001:db8::$mac$|$id$|$range$|$random$
Patterns allow to design the addresses according to their category. See examples section below to make it more clear.

.BR $mac$ " - The MAC address from the DHCPv6 request's Link Local Address found in the neighbor cache will be inserted instead of the placeholder.
It will be stretched over 3 octets like 00:11:22:33:44:55 becomes 0011:2233:4455.

.BR $id$ " - If clients get an ID in client configuration file or in client configuration database this ID will fill one octet.
Thus the ID has to be in the range of 0000-FFFF.

.BR $range$ " - If address is of category range the range defined with extra keyword " range " will be used here in place of one octet.
This is why the range can span from 0000-FFFF. Clients will get an address out of the given range.

.BR $random$ " - A 64 bit random address will be generated in place of this variable. Clients get a random address just like they would
if privacy extensions were used. The random part will span over 4 octets.

.TP
.BR prefix_length\ =\ <0-128>
Default prefix length for addresses is 64 but it can be customized here.

.TP
.BR ia_type\ =\ na\ |\ ta
IA (Identity Association) types can be one of non-temporary address "na" or temporary address "ta". Default and probably most used is "na".

.TP
.BR preferred_lifetime\ =\ <seconds>
.TP
.BR valid_lifetime\ =\ <seconds>
As default preferred and valid lifetime are set in general settings, but it is configurable individually for every address setting.

.TP
.BR dns_update\ =\ yes\ |\ no
.TP
.BR dns_zone\ =\ <dnszone>
.TP
.BR dns_rev_zone\ =\ <reverse_dnszone>
If these addresses should be synchronized with Bind DNS, these three settings have to be set accordingly.
The nameserver for updates is set in general settings.

.SS DEFAULT\ ADDRESS
The address scheme used for the default class "class_default" is by default named "address_default".
It should be enough if address_default is defined, only if unknown clients should get extra nameservers etc. a class_default has to be set.

.TP
.BR [address_default]
Address scheme used as default for clients which do not match any other class than "class_default".

.SH CLASS DEFINITIONS IN SEVERAL [class_<class_name>] SECTIONS

.RB The " <class_name> " part\ of\ an " [class_<class_name>] " section\ is\ an\ arbitrarily\ choosen\ identifier\ like\ "clients"\ or\ "invalid_clients".
Clients can be grouped in classes. Different classes can have different properties, different address sets and different numbers of addresses.
Classes also might have different name servers, time intervals, filters and interfaces.

A client gets the addresses, nameserver and T1/T2 values of the class which it is configured for in client configuration database or file.

.TP
.BR addresses\ =\ <address_name>\ [<address_name>\ ...]
A class can contain as many addresses as needed. Their names have to be separated by spaces.

.TP
.BR nameserver\ =\ <nameserver-address>\ [<nameserver-address>\ ...]
Each class can have its own nameservers. If this option is used it replaces the nameservers from general settings.

.TP
.BR t1\ =\ <seconds>
.TP
.BR t2\ =\ <seconds>
.RB  Each\ class\ can\ have\ its\ own " t1 " and " t2 " values.
The ones from general settings will be overridden. Might be of use for some invalid-but-about-to-become-valid-somehow-soon class.

.TP
.BR filter_hostname\ =\ <regular_expression>
.TP
.BR filter_mac\ =\ <regular_expression>
.TP
.BR filter_duid\ =\ <regular_expression>
Filters allow to apply a class to a client not by configuration but by a matching regular expression filter.
Most useful might be the filtering by hostname, but maybe there is some use for DUID and MAC address based filtering too.
The regular expressions are meant to by Python Regular Expressions.
.RI See " https://docs.python.org/2/howto/regex.html " and\ examples\ section\ below\ for\ details.

.TP
.BR interface\ =\ <interface>\ [<interface>\s ...]
It is possible to let a class only apply on specific interfaces. These have to be separated by spaces.

.SS DEFAULT\ CLASS
At the moment every client which does not match any other class by client configuration or filter automatically matches the class "default".
This class could get an address scheme too.
It should be enough if address_default is defined, only if unknown clients should get extra nameservers etc. a class_default has to be set.

.TP
.BR [class_default]
Default class for all clients that do not match any other class.
Like any other class it could contain all options that appyl to a class.

.TP
.BR [class_default_<interface>]
If dhcpy6d listens at multiple interfaces, one can define a default class for every interface.

.SH "EXAMPLES"
The following paragraphs contain some hopefully helpful examples.

.SS 1. MINIMAL CONFIGURATION
Here in this minimalistic example the server daemon listens on interface eth0.
It does not use any client configuration source but answers requests with default addresses.
These are made of the pattern fd01:db8:dead:bad:beef:$mac$
and result in addresses like fd01:db8:deaf:bad:beef:1020:3040:5060 if the MAC address of the
requesting client was 10:20:30:40:50:60.

.nf
[dhcpy6d]
# set to yes to really answer to clients
really_do_it = yes

# Interface to listen to multicast ff02::1:2.
interface = eth0

# some server DUID
serverduid = 0001000134824528134567366121

# Do not identify and configure clients.
store_config = none

# SQLite DB for leases and LLIP-MAC-mapping.
store_volatile = sqlite
store_sqlite_volatile = volatile.sqlite

# Special address type which applies to all not specially
# configured clients.
[address_default]
# Choosing MAC-based addresses.
category = mac
# ULA-type address pattern.
pattern = fd01:db8:dead:bad:beef:$mac$

.fi

.SS 2. MORE COMPLEX CONFIGURATION
This example shows some more complexity

.nf
[dhcpy6d]
# set to yes to really answer to clients
really_do_it = yes

# Interface to listen to multicast ff02::1:2.
interface = eth0

# Server DUID - if not set there will be one generated every time dhcpy6d starts.
# This might cause trouble for Windows clients because they go crazy about the
# changed server DUID.
serverduid = 0001000134824528134567366121

# non-privileged user/group
user = dhcpy6d
group = dhcpy6d

# Nameservers for option 23 - there can be several specified separated by spaces.
nameserver = fd01:db8::53

# Domain to be used for option 39 - host FQDN
domain = example.com

# Domain search list for option 24 - domain search list.
# If omited the value of option "domain" above is taken as default
domain_search_list = example.com

# Do logging.
log = yes
# Log to console.
log_console = no
# Path to logfile.
log_file = /var/log/dhcpy6d.log

# Use SQLite for client configuration
store_config = sqlite

# Paths to SQLite database files.
store_sqlite_config = config.sqlite
store_sqlite_volatile = volatile.sqlite

# Declare which attributes of a requesting client should be checked
# to prove its identity. It is  possible to mix them, separated by spaces.
identification = mac

# Declare if all checked attributes have to match or is it enough if
# some do. Kind of senseless with just one attribute.
identification_mode = match_all




.fi

.SH "SEE ALSO"
.nf 
.BR dhcpy6d (8)
.BR dhcpy6d\-clients.conf (5)
https://dhcpy6d.ifw\-dresden.de
https://github.com/HenriWahl/dhcpy6d
